{
    "swagger": "2.0",
    "info": {
        "title": "Promote Api",
        "description": "Handsmoe API",
        "version": "1.0.0"
    },
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Swagger schema",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/token": {
            "post": {
                "summary": "Get token.",
                "description": "Protected by login form (username & password as form-data to this page).",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Authentication credentials",
                        "schema": {
                            "required": [
                                "username",
                                "password"
                            ],
                            "properties": {
                                "username": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Auth granted",
                        "schema": {
                            "properties": {
                                "apiKey": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/artists": {
            "get": {
                "summary": "Get artists.",
                "responses": {
                    "200": {
                        "description": "Get artists",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PaginatedRepresentation"
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new Artist.",
                "parameters": [
                    {
                        "name": "artist",
                        "in": "body",
                        "required": true,
                        "description": "Artist to add",
                        "schema": {
                            "$ref": "#/definitions/ArtistType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Artist created",
                        "schema": {
                            "$ref": "#/definitions/Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    }
                }
            }
        },
        "/artists/{artist}": {
            "get": {
                "summary": "Get an artist.",
                "parameters": [
                    {
                        "name": "artist",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get an artist",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Artist"
                            }
                        }
                    },
                    "404": {
                        "description": "Artist not found"
                    }
                }
            },
            "put": {
                "summary": "Update an Artist.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Artist to update",
                        "schema": {
                            "$ref": "#/definitions/ArtistType"
                        }
                    },
                    {
                        "name": "artist",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artist updated",
                        "schema": {
                            "$ref": "#/definitions/Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "Artist not found"
                    }
                }
            },
            "patch": {
                "summary": "Pacth an Artist.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Artist to patch",
                        "schema": {
                            "$ref": "#/definitions/ArtistType"
                        }
                    },
                    {
                        "name": "artist",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artist updated",
                        "schema": {
                            "$ref": "#/definitions/Artist"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "Artist not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete an Artist.",
                "parameters": [
                    {
                        "name": "artist",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "2"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Artist deleted"
                    },
                    "404": {
                        "description": "Artist not found"
                    }
                }
            }
        },
        "/artists/{artist}/picture": {
            "put": {
                "summary": "Upload a new artist picture.",
                "parameters": [
                    {
                        "name": "BinaryData",
                        "in": "body",
                        "required": true,
                        "description": "Image content",
                        "schema": {
                            "type": "string",
                            "format": "byte"
                        }
                    },
                    {
                        "name": "artist",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artist picture updated",
                        "schema": {
                            "$ref": "#/definitions/Artist"
                        }
                    },
                    "415": {
                        "description": "Unsupported media type"
                    },
                    "404": {
                        "description": "Artist not found"
                    }
                }
            }
        },
        "/labels": {
            "get": {
                "summary": "Get all labels.",
                "responses": {
                    "200": {
                        "description": "Paginated label collection",
                        "schema": {
                            "$ref": "#/definitions/PaginatedRepresentation"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new label.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Label to add",
                        "schema": {
                            "$ref": "#/definitions/LabelType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Label created",
                        "schema": {
                            "$ref": "#/definitions/Label"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    }
                }
            }
        },
        "/labels/{label}": {
            "get": {
                "summary": "Get a Label.",
                "parameters": [
                    {
                        "name": "label",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a label",
                        "schema": {
                            "$ref": "#/definitions/Label"
                        }
                    },
                    "404": {
                        "description": "Label not found"
                    }
                }
            },
            "put": {
                "summary": "Update a label.",
                "description": "ApiDoc(\n input=\"AppBundle\\Form\\Type\\LabelType\",\n output=\"AppBundle\\Entity\\Label\",\n statusCodes = {\n    200 = \"Label updated\",\n    404 = \"Label not found\"\n  }\n)",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Label to add",
                        "schema": {
                            "$ref": "#/definitions/LabelType"
                        }
                    },
                    {
                        "name": "label",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label updated",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Label"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "Label not found"
                    }
                }
            },
            "patch": {
                "summary": "Patch a label.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Label to add",
                        "schema": {
                            "$ref": "#/definitions/LabelType"
                        }
                    },
                    {
                        "name": "label",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label patched",
                        "schema": {
                            "$ref": "#/definitions/Label"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    },
                    "404": {
                        "description": "Label not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete a label.",
                "parameters": [
                    {
                        "name": "label",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "2"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Label deleted"
                    },
                    "404": {
                        "description": "Label not found"
                    }
                }
            }
        },
        "/gigs": {
            "get": {
                "summary": "Get all gigs.",
                "responses": {
                    "200": {
                        "description": "Get the paginated gigs collection",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PaginatedRepresentation"
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new Gig.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Gig to add",
                        "schema": {
                            "$ref": "#/definitions/GigType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Gig created",
                        "schema": {
                            "$ref": "#/definitions/Gig"
                        }
                    },
                    "400": {
                        "description": "Invalid Request"
                    }
                }
            }
        },
        "/gigs/{gig}": {
            "get": {
                "summary": "Get a gig.",
                "parameters": [
                    {
                        "name": "gig",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a gig",
                        "schema": {
                            "$ref": "#/definitions/Gig"
                        }
                    },
                    "404": {
                        "description": "Gig not found"
                    }
                }
            },
            "put": {
                "summary": "Modify an existing Gig.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Gig to add",
                        "schema": {
                            "$ref": "#/definitions/GigType"
                        }
                    },
                    {
                        "name": "gig",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gig updated",
                        "schema": {
                            "$ref": "#/definitions/Gig"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "Gig not found"
                    }
                }
            },
            "patch": {
                "summary": "Patch an existing Gig.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "description": "Gig to add",
                        "schema": {
                            "$ref": "#/definitions/GigType"
                        }
                    },
                    {
                        "name": "gig",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gig patched",
                        "schema": {
                            "$ref": "#/definitions/Gig"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "Gig not found"
                    }
                }
            },
            "delete": {
                "summary": "Delete an existing Gig.",
                "description": "ApiDoc(statusCodes = {\n  204 = \"Gig deleted\",\n  404 = \"Gig not found\"\n})",
                "parameters": [
                    {
                        "name": "gig",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "x-example": "2"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Gig deleted"
                    },
                    "404": {
                        "description": "Gig not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "PaginatedRepresentation": {
            "type": "object"
        },
        "Artist": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "image_name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ArtistType": {
            "required": [
                "name",
                "slug",
                "bio",
                "gigs",
                "labels"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "gigs": {
                    "example": "[1, 2, 3]",
                    "type": "array",
                    "format": "[AppBundle\\Entity\\Gig id]"
                },
                "labels": {
                    "example": "[1, 2, 3]",
                    "type": "array",
                    "format": "[AppBundle\\Entity\\Label id]"
                }
            },
            "type": "object"
        },
        "Label": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LabelType": {
            "required": [
                "name",
                "slug",
                "description"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Gig": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string",
                    "format": "date-time"
                },
                "end_date": {
                    "type": "string",
                    "format": "date-time"
                },
                "venue": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "facebook_link": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GigType": {
            "required": [
                "name",
                "startDate",
                "endDate",
                "venue",
                "address",
                "facebookLink"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "venue": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "facebookLink": {
                    "type": "string"
                }
            },
            "type": "object"
        }
    }
}